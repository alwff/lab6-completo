
LABORATORIO6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001b2  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  00000256  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ac  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006df  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000303  00000000  00000000  0000119b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  000014a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b2  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000133  00000000  00000000  0000190e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001a41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  9e:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART09600>:
}


void initUART09600(void){
	//Configurando los pines RX y TX
	DDRD &= ~(1<<DDD0); //D0 RX como entrada
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1); //D1 TX como salida
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
	
	//Se define el modo de trabajo
	UCSR0A = 0;
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	UCSR0A |= (1<<U2X0); // Usando el registro de control A. Se configura en Modo Fast U2X0 = 1
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
	
	//Se configura el registro de control B
	UCSR0B = 0;
  be:	e1 ec       	ldi	r30, 0xC1	; 193
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0); // Se habilita la interrupcion ISR RX
  c4:	80 81       	ld	r24, Z
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXEN0); // Se habilita RX
  ca:	80 81       	ld	r24, Z
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	80 83       	st	Z, r24
	UCSR0B |= (1<<TXEN0); // Se habilita TX
  d0:	80 81       	ld	r24, Z
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	80 83       	st	Z, r24
	
	//Se configura el registro de control C
	//Se define el frame
	UCSR0C = 0;
  d6:	e2 ec       	ldi	r30, 0xC2	; 194
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	10 82       	st	Z, r1
	UCSR0C = (1<<UCSZ01)| (1<<UCSZ00); // Define el numero de bits de data en el frame del receiver y el transmitter
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	80 83       	st	Z, r24
	//Error%=((BAUDcalculado/BAUD)-1)*100%
	//Usando fosc de 16 MHZ 
	//UBRRn = 207
	//BAUDRATE = 9600

	UBRR0 = 207;
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ec:	08 95       	ret

000000ee <writeUART>:
}

//Escritura - Verifica si el UDREn buffer esta vacio
void writeUART(char character){
	while(!(UCSR0A&(1<<UDRE0))); //Si esto esta vacio entonces se manda
  ee:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f2:	95 ff       	sbrs	r25, 5
  f4:	fc cf       	rjmp	.-8      	; 0xee <writeUART>
	//Mientras while no sea cierto, y como esta vacio simplemente se atora en el while hasta que se cumpla la condicion
	UDR0 = character;
  f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  fa:	08 95       	ret

000000fc <writeTextUART>:
}

//Trabajando de la misma forma que la funcion anterior, esta es capaz de leer strings completas
void writeTextUART(char* text){
  fc:	ac 01       	movw	r20, r24
	uint8_t i;
	for (i=0; text[i]!='\0'; i++){ //Inicia en 0 y para cuando sea nulo \0
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	07 c0       	rjmp	.+14     	; 0x110 <writeTextUART+0x14>
		while(!(UCSR0A&(1<<UDRE0))); 
 102:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 106:	95 ff       	sbrs	r25, 5
 108:	fc cf       	rjmp	.-8      	; 0x102 <writeTextUART+0x6>
		UDR0 = text[i]; //Barre todo el arreglo hasta acabar
 10a:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

//Trabajando de la misma forma que la funcion anterior, esta es capaz de leer strings completas
void writeTextUART(char* text){
	uint8_t i;
	for (i=0; text[i]!='\0'; i++){ //Inicia en 0 y para cuando sea nulo \0
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	fa 01       	movw	r30, r20
 112:	e2 0f       	add	r30, r18
 114:	f1 1d       	adc	r31, r1
 116:	30 81       	ld	r19, Z
 118:	31 11       	cpse	r19, r1
 11a:	f3 cf       	rjmp	.-26     	; 0x102 <writeTextUART+0x6>
		while(!(UCSR0A&(1<<UDRE0))); 
		UDR0 = text[i]; //Barre todo el arreglo hasta acabar
	}
	
}
 11c:	08 95       	ret

0000011e <main>:
volatile char bufferRX; //Es volatil porque va a estar dentro de la interrupcion, pues puede cambiar en todo momento
//******************************************************************

int main(void)
{
	cli();
 11e:	f8 94       	cli
	//Como salidas
	DDRB |= 0xFF;
 120:	84 b1       	in	r24, 0x04	; 4
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<PORTD6)|(1<<PORTD7);
 126:	8a b1       	in	r24, 0x0a	; 10
 128:	80 6c       	ori	r24, 0xC0	; 192
 12a:	8a b9       	out	0x0a, r24	; 10
	
	initUART09600();
 12c:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART09600>
	
	sei();
 130:	78 94       	sei
	writeUART('L');
	writeUART('A');
	writeUART(' ');
	*/
	
	writeTextUART("\n Hola mundo! \n");
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 7e 00 	call	0xfc	; 0xfc <writeTextUART>
		
	writeUART('5');
 13a:	85 e3       	ldi	r24, 0x35	; 53
 13c:	0e 94 77 00 	call	0xee	; 0xee <writeUART>
 140:	ff cf       	rjmp	.-2      	; 0x140 <main+0x22>

00000142 <intforport>:
	}
	
}

int intforport(char bufferRX){
	return bufferRX - '0'; //Convierte lo recibido por el buffer en un entero para moder mostrarlo en el puertoB
 142:	90 e0       	ldi	r25, 0x00	; 0
}
 144:	c0 97       	sbiw	r24, 0x30	; 48
 146:	08 95       	ret

00000148 <__vector_18>:

//Interrupcion 
//USART_RX
ISR(USART_RX_vect){
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	//Actuando como un eco, lo que se envia, regresa lo  mismo
	bufferRX = UDR0;
 16a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 16e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	while(!(UCSR0A&(1<<UDRE0))); //Si esto esta vacio entonces se manda
 172:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 176:	85 ff       	sbrs	r24, 5
 178:	fc cf       	rjmp	.-8      	; 0x172 <__vector_18+0x2a>
	UDR0 = bufferRX; //Mete a UDR0 lo que esta en el buffer para enviarlo
 17a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 17e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	PORTB=intforport(bufferRX); //Lo recibido lo muestra en el portB
 182:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 186:	0e 94 a1 00 	call	0x142	; 0x142 <intforport>
 18a:	85 b9       	out	0x05, r24	; 5
}
 18c:	ff 91       	pop	r31
 18e:	ef 91       	pop	r30
 190:	bf 91       	pop	r27
 192:	af 91       	pop	r26
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	7f 91       	pop	r23
 19a:	6f 91       	pop	r22
 19c:	5f 91       	pop	r21
 19e:	4f 91       	pop	r20
 1a0:	3f 91       	pop	r19
 1a2:	2f 91       	pop	r18
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
